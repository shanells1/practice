// script태크를 head태그안에 넣을 경우 : 인터넷 브라우저에서 html파일을 보여줄때 위에서 아래로 순차적으로 해석해서 보여주는데 해석하는 중 script태그가 
// 보이면 그 안에 있는 javascript 파일을 서버에서 다운받아 실행 한 후 남은 부분을 마저 로드한다. script태크를 head태그안에 그냥 포함시킬 때 문제점은 
// js파일을 서버에서 다운 받는 동안 뒤에 있는 html파일의 로드가 멈춰있다는 거다 이렇게 될 경우 만약 js파일이 굉장히 크다면 js파일을 다운로드 하는동안 페이지를
// 볼 수 없기 떄문에 사용자에게 페이지를 보여주는 시간이 길어질 것이다.

// script태그를 body태그 가장 끝부분에 넣을 경우 : script태그를 body태그 끝에 넣는다면 브라우저가 js파일을 가장 늦게 해석하기 때문에 사용자에게 html과 css로 구성된 페이지는
// 빨리 보여줄 수 았지만 만약 만든 웹사이트가 j.s파일에 굉장히 의존적이라면 사용자가 정상적인 페이지를 보기위해 js파일을 다운로드하는 시간과 실행하는 시간도 기다려야하는 단점이 있다.

// head태그안에 async 속성을 사용 : async속성을 위에 방법들과는 달리 병렬방식으로 script태그 안에 있는 js파일을 다운 받으라는 명령만 내려놓고 동시에 나머지 html파일을 
// 계속 해석하다가 js파일이 다운로드 되면 html파일의 해석을 멈추고 js파일을 실행시킨 후 다시 해석한다. 이 방법의 경우 벙렬로 진행하기 때문에 위에 방법들보다는 다운로드 받는 시간을 
// 절약할 수는 있지만 js파일이 html의 로드가 되기전에 다운받아져 실행이 되고 만약 js파일이 아직 로드되지 않은 html과 연관이 있다면 문제가 발생할 수 있다 또한 js파일을 실행하는 동안
// 은 html의 로드를 멈출 수 있기 때문에 사용자가 페이지를 볼때 여전히 시간이 조금 걸릴 수 있다는 단점이 있다.

// head태그안에 defer 속성을 사용: defer속성을 사용하면 async속성과 마찬가지로 병렬로 js파일의 다운로드 명령만 내리고 나머지 html코드들을 해석하는데 async속성과의 차이점은
// js파일이 다운로드되면 바로 실행하는 async속성과 달리 defer속성은 js파일이 다운로드 되어도 html파일의 로드를 멈추지 않고 다 해석한 후 다운로드한 js파일을 실행한다.

// async속성과 defer속성의 차이 : 적용해야할 js파일이 여러개인경우 async속성의 경우 코드 순서와 상관없이 먼저 다운로드 된 js파일부터 순차적으로 실행하게 되는데 만든 js파일이
// 순서의 의존적이라면 async속성을 사용하게 될 경우 문제가 생길 수 있다. 반대로 defer 속성의 경우 페이지가 전부 로드 될 동안 js파일을 실행하지 않고 다운로드만 받아놓았다가 페이지가 
// 로드된 후 코드 순서에 맞게 실행시킨다. 이렇기 여러 이유를 봤을 때 head태그안에 defer속성을 사용해 js파일을 적용하는게 안전하고 좋은 방법이라 할 수 있다.

'use strict';
// use strict을 사용하는 이유 : j.s언어는 굉장히 유연하게 적용되는 언어로 만들어졌는데 이 부분이 좋은 점도 있지만 코드를 만들 때 자신이 실수한 부분을 모르고 지나가는 경우가 생기기
// 때문에 매우 위험한 일이 생길 수 있다. use strict은 ecmascript5에 추가되어 나왔는데 use strict를 선언하면 그런 유연한 부분들을 사용할 수 없게 된다.

// a = 6;
// use strict을 선언하지 않으면 위에 a라는 변수를 할당하지 않았음에도 불구하고 문제없이 정상적으로 작동한다.

let a
a = 6;
// use strict을 선언하면 이런식으로 let을 사용하여 a가 변수라는 것을 지정해줘야 문제가 생기지 않는다.

